
*********创建型模式*********
简单工厂模式(Simple Factory)：工厂类一般是使用静态方法，通过接收的参数的不同来返回不同的对象实例，用来生产同一等级结构中的任意产品。（对于增加新的产品，无能为力）

工厂方法模式(Factory Method)：是针对每一种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品实例，用来生产同一等级结构中的固定产品。（支持增加任意产品）

抽象工厂模式(Abstract  Factory)：是应对产品族概念的，比如说，每个汽车公司可能要同时生产轿车，货车，客车，那么每一个工厂都要有创建轿车，货车和客车的方法。应对产品族概念而生，增加新的产品线很容易，但是无法增加新的产品。
    用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族）。

单例模式(Singleton Pattern)：确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。单例模式是一种对象创建型模式。
    单例模式有三个要点：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。
    饿汉式--加载时就会创建实例
    懒汉式--延迟加载，首次使用的时候才会实例化
    IoDH--静态内部类

原型模式(Prototype  Pattern)：对象的克隆，clone返回的是new的新对象，使用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。原型模式是一种对象创建型模式。

建造者模式(Builder Pattern)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。建造者模式是一种对象创建型模式。
    复杂对象的初始化在抽象父类中，对象的具体属性设置在子类中


*********结构型模式*********
适配器模式(Adapter Pattern)：将一个接口转换成客户希望的另一个接口，使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。
    适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。
    在对象适配器模式中，适配器与适配者之间是关联关系；在类适配器模式中，适配器与适配者之间是继承（或实现）关系。


桥接模式(Bridge Pattern)：将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。
    自有方法（抽象+子类实现），关联对象(设置到抽象父类中)
    对于毛笔而言，由于型号是其固有的维度，因此可以设计一个抽象的毛笔类，在该类中声明并部分实现毛笔的业务方法，而将各种型号的毛笔作为其子类；
    颜色是毛笔的另一个维度，由于它与毛笔之间存在一种“设置”的关系，因此我们可以提供一个抽象的颜色接口，而将具体的颜色作为实现该接口的子类。
    在此，型号可认为是毛笔的抽象部分，而颜色是毛笔的实现部分

