
*********创建型模式*********
1A、简单工厂模式(Simple Factory)：【学习难度：★★☆☆☆，使用频率：★★★☆☆】
    工厂类一般是使用静态方法，通过接收的参数的不同来返回不同的对象实例，用来生产同一等级结构中的任意产品。（对于增加新的产品，无能为力）

2B、工厂方法模式(Factory Method)：【学习难度：★★☆☆☆，使用频率：★★★★★】
    是针对每一种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品实例，用来生产同一等级结构中的固定产品。（支持增加任意产品）

3C、抽象工厂模式(Abstract  Factory)：【学习难度：★★★★☆，使用频率：★★★★★】
    是应对产品族概念的，比如说，每个汽车公司可能要同时生产轿车，货车，客车，那么每一个工厂都要有创建轿车，货车和客车的方法。应对产品族概念而生，增加新的产品线很容易，但是无法增加新的产品。
    用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族）。

4D、单例模式(Singleton Pattern)：【学习难度：★☆☆☆☆，使用频率：★★★★☆】
    确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。单例模式是一种对象创建型模式。
    单例模式有三个要点：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。
    饿汉式--加载时就会创建实例
    懒汉式--延迟加载，首次使用的时候才会实例化
    IoDH--静态内部类

5E、原型模式(Prototype Pattern 对象的克隆)：【学习难度：★★★☆☆，使用频率：★★★☆☆】
    clone返回的是new的新对象，使用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。原型模式是一种对象创建型模式。


6F、建造者模式(Builder Pattern 复杂对象的组装与创建)：【学习难度：★★★★☆，使用频率：★★☆☆☆】
    将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。建造者模式是一种对象创建型模式。
    复杂对象的初始化在抽象父类中，对象的具体属性设置在子类中


*********结构型模式*********
7G、适配器模式(Adapter Pattern 不兼容结构的协调)：【学习难度：★★☆☆☆，使用频率：★★★★☆】
    将一个接口转换成客户希望的另一个接口，使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。
    适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。
    在对象适配器模式中，适配器与适配者之间是关联关系；在类适配器模式中，适配器与适配者之间是继承（或实现）关系。


8H、桥接模式(Bridge Pattern 处理多维度变化)：【学习难度：★★★☆☆，使用频率：★★★☆☆】
    将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。
    自有方法（抽象+子类实现），关联对象(设置到抽象父类中)
    对于毛笔而言，由于型号是其固有的维度，因此可以设计一个抽象的毛笔类，在该类中声明并部分实现毛笔的业务方法，而将各种型号的毛笔作为其子类；
    颜色是毛笔的另一个维度，由于它与毛笔之间存在一种“设置”的关系，因此我们可以提供一个抽象的颜色接口，而将具体的颜色作为实现该接口的子类。
    在此，型号可认为是毛笔的抽象部分，而颜色是毛笔的实现部分


9I、组合模式(Composite Pattern 树形结构的处理)：【学习难度：★★★☆☆，使用频率：★★★★☆】
    组合多个对象形成树形结构以表示具有“整体—部分”关系的层次结构。
    组合模式对单个对象（即叶子对象）和组合对象（即容器对象）的使用具有一致性，组合模式又可以称为“整体—部分”(Part-Whole)模式，它是一种对象结构型模式。
    组合模式的关键是定义了一个抽象构件类，它既可以代表叶子，又可以代表容器，而客户端针对该抽象构件类进行编程，无须知道它到底表示的是叶子还是容器，可以对其进行统一处理。
    实际叶子节点的除操作外的方法，都是没用的，这是基本的组合模式，透明组合模式，可以有安全的组合模式，在抽象层不定义除operation外的方法
    java awt(swing)包中，checkbox，button 等都是使用的这种安全模式，父节点是个Container，通过list来存储子节点，更新的时候，只需操作父节点，级联更新。


10J、装饰模式(Decorator Pattern 扩展系统功能)：【学习难度：★★★☆☆，使用频率：★★★☆☆】
    动态地给一个对象增加一些额外的职责，就增加对象功能来说，装饰模式比生成子类实现更为灵活。装饰模式是一种对象结构型模式。
    在实际使用过程中，由于新增行为可能需要单独调用，因此这种形式的装饰模式也经常出现，这种装饰模式被称为半透明(Semi-transparent)装饰模式，而标准的装饰模式是透明(Transparent)装饰模式。
    装饰模式采用的是继承的模式，让子类去调用父类的方法，然后新增自己的实现
    桥接模式采用的是应用合成/聚合复用原则的模式，是将属性类注入进去，从而实现调用


11K、外观模式(Facade Pattern)：【学习难度：★☆☆☆☆，使用频率：★★★★★】
    为子系统中的一组接口提供一个统一的入口。外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。

12L、享元模式(Flyweight Pattern 对象的复用)：【学习难度：★★★★☆，使用频率：★☆☆☆☆】
    运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用。
    由于享元模式要求能够共享的对象必须是细粒度对象，因此它又称为轻量级模式，它是一种对象结构型模式。
    JDK中String 类使用了享元模式，String a="aa";String b="aa" a==b为true 共享的同一个内存地址


13M、代理模式(Proxy Pattern)：【学习难度：★★★☆☆，使用频率：★★★★☆】
    给某一个对象提供一个代理或占位符，并由代理对象来控制对原对象的访问。


*********行为型模式*********
14N、职责链模式(Chain of Responsibility Pattern 请求的链式处理)：【学习难度：★★★☆☆，使用频率：★★☆☆☆】
    避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。
    职责链模式结构的核心在于引入了一个抽象处理者，例如过滤器FilterChain


15O、命令模式(Command Pattern 请求发送者与接收者解耦)：【学习难度：★★★☆☆，使用频率：★★★★☆】
    将一个请求封装为一个对象，从而让我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。
    命令模式是一种对象行为型模式，其别名为动作(Action)模式或事务(Transaction)模式。
    命令模式的本质是对请求进行封装，一个请求对应于一个命令，将发出命令的责任和执行命令的责任分割开。
    每一个命令都是一个操作：请求的一方发出请求要求执行一个操作；接收的一方收到请求，并执行相应的操作。
    命令模式允许请求的一方和接收的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求如何被接收、操作是否被执行、何时被执行，以及是怎么被执行的。
    命令模式的关键在于引入了抽象命令类，请求发送者针对抽象命令类编程，只有实现了抽象命令类的具体命令才与请求接收者相关联。


16P、解释器模式(Interpreter Pattern)：【学习难度：★★★★★，使用频率：★☆☆☆☆】
    定义一个语言的文法，并且建立一个解释器来解释该语言中的句子，这里的“语言”是指使用规定格式和语法的代码。解释器模式是一种类行为型模式。


17Q、迭代器模式(Iterator Pattern 遍历聚合对象中的元素)：【学习难度：★★★☆☆，使用频率：★★★★★】
    提供一种方法来访问聚合对象，而不用暴露这个对象的内部表示，其别名为游标(Cursor)。迭代器模式是一种对象行为型模式。
    为了能够让迭代器可以访问到聚合对象中的数据，我们还可以将迭代器类设计为聚合类的内部类，JDK中的迭代器类就是通过这种方法来实现的


18R、中介者模式(Mediator Pattern 协调多个对象之间的交互)：【学习难度：★★★☆☆，使用频率：★★☆☆☆】
    用一个中介对象（中介者）来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，
    而且可以独立地改变它们之间的交互。中介者模式又称为调停者模式，它是一种对象行为型模式。


19S、备忘录模式(Memento Pattern 撤销功能的实现)：【学习难度：★★☆☆☆，使用频率：★★☆☆☆】
    在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。它是一种对象行为型模式，其别名为Token。


20T、观察者模式(Observer Pattern)：【学习难度：★★★☆☆，使用频率：★★★★★】
    定义对象之间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。
    观察者模式的别名包括发布-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-监听器（Source/Listener）模式或从属者（Dependents）模式。观察者模式是一种对象行为型模式。
    JDK 1.0及更早版本的事件模型基于职责链模式，但是这种模型不适用于复杂的系统，因此在JDK 1.1及以后的各个版本中，事件处理模型采用基于观察者模式的委派事件模型(DelegationEvent Model, DEM)，
    即一个Java组件所引发的事件并不由引发事件的对象自己来负责处理，而是委派给独立的事件处理对象负责。
    观察者模式包含观察目标和观察者两类对象，一个目标可以有任意数目的与之相依赖的观察者，一旦观察目标的状态发生改变，所有的观察者都将得到通知。
    作为对这个通知的响应，每个观察者都将监视观察目标的状态以使其状态与目标状态同步，这种交互也称为发布-订阅(Publish-Subscribe)。
    观察目标是通知的发布者，它发出通知时并不需要知道谁是它的观察者，可以有任意数目的观察者订阅它并接收通知。


21U、状态模式(State Pattern)：【学习难度：★★★☆☆，使用频率：★★★☆☆】
    允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。其别名为状态对象(Objects for States)，状态模式是一种对象行为型模式。
    状态模式的主要优点如下：
    (1) 封装了状态的转换规则，在状态模式中可以将状态的转换代码封装在环境类或者具体状态类中，可以对状态转换代码进行集中管理，而不是分散在一个个业务方法中。
    (2) 将所有与某个状态有关的行为放到一个类中，只需要注入一个不同的状态对象即可使环境对象拥有不同的行为。
    (3) 允许状态转换逻辑与状态对象合成一体，而不是提供一个巨大的条件语句块，状态模式可以让我们避免使用庞大的条件语句来将业务方法和状态转换代码交织在一起。
    (4) 可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。
    状态模式的主要缺点如下：
           (1) 状态模式的使用必然会增加系统中类和对象的个数，导致系统运行开销增大。
           (2) 状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱，增加系统设计的难度。
           (3) 状态模式对“开闭原则”的支持并不太好，增加新的状态类需要修改那些负责状态转换的源代码，否则无法转换到新增状态；而且修改某个状态类的行为也需修改对应类的源代码。


22V、策略模式(Strategy Pattern)：【学习难度：★☆☆☆☆，使用频率：★★★★☆】
    定义一系列算法类，将每一个算法封装起来，并让它们可以相互替换，策略模式让算法独立于使用它的客户而变化，也称为政策模式(Policy)。策略模式是一种对象行为型模式。
    优点：可以避免多重条件选择语句，管理相关的算法族，算法的复用机制
    缺点：客户端必须知道所有的策略类，并自行决定使用哪一个策略类，将造成系统产生很多具体策略类，无法同时在客户端使用多个策略类


23W、模板方法模式(Template Method Pattern)：【学习难度：★★☆☆☆，使用频率：★★★☆☆】
    定义一个操作中算法的框架，而将一些步骤延迟到子类中。模板方法模式使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。


24X、访问者模式(Visitor Pattern):【学习难度：★★★★☆，使用频率：★☆☆☆☆】
    提供一个作用于某对象结构中的各元素的操作表示，它使我们可以在不改变各元素的类的前提下定义作用于这些元素的新操作。访问者模式是一种对象行为型模式。操作复杂对象结构

