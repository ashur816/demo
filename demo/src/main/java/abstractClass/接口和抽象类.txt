其实abstract class表示的是"is a"关系，interface表示的是"like a"关系
接口定义的只是契约

abstract class和interface是Java语言中的两种定义抽象类的方式，它们之间有很大的相似性。但是对于它们的选择却又往往反映出对于问题领域中的概念本质的理解、对于设计意图的反映是否正确、合理，
因为它们表现了概念间的不同的关系（虽然都能够实现需求的功能）。这其实也是语言的一种习惯用法。

 总结几句话来说：


1、抽象类和接口都不能直接实例化(就是不能直接new)，如果要实例化，抽象类变量必须指向实现所有抽象方法的子类对象，接口变量必须指向实现所有接口方法的类对象。

2、抽象类要被子类继承，接口要被类实现。

3、接口只能做方法申明，抽象类中可以做方法申明，也可以做方法实现

4、接口里定义的变量只能是公共的静态的常量，抽象类中的变量是普通变量，接口里面只能加public修饰符，也可以不加，默认只有public。

5、抽象类里的抽象方法必须全部被子类所实现，如果子类不能全部实现父类抽象方法，那么该子类只能是抽象类。同样，一个实现接口的时候，如不能全部实现接口方法，那么该类也只能为抽象类。
抽象方法就跟接口里面的方法一样

6、抽象方法只能申明，不能实现。abstract void abc();不能写成abstract void abc(){}。

7、抽象类里可以没有抽象方法

8、如果一个类里有抽象方法，那么这个类只能是抽象类

9、抽象方法要被实现，所以不能是静态的，也不能是私有的。

10、接口可继承接口，并可多继承接口，但类只能单根继承。

　　特别是对于公用的实现代码，抽象类有它的优点。抽象类能够保证实现的层次关系，避免代码重复。然而，即使在使用抽 象类的场合，也不要忽视通过接口定义行为模型的原则。从实践的角度来看，
如果依赖于抽象类来定义行为，往往导致过于复杂的继承关系，而通过接口定义行为能 够更有效地分离行为与实现，为代码的维护和修改带来方便。